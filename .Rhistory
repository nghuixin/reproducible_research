boot_means <- apply(boot_samples, 2, mean)
return(boot_means)
}
# Generate bootstrap samples and calculate means
boot_means <- bootstrap_mean(agem)
# Get simulated values for 'agem' based on bootstrapped means
simulated_agem <- sample(boot_means, size = nrow(subset_data), replace = TRUE)
# Now 'simulated_agem' contains the simulated values for 'agem' based on the bootstrapped means distribution
# write data to csv file
write.csv(simulated_data, "data/bd_inflm_simulated.csv", row.names=FALSE)
### --- SANITY CHECKS ---
# Compute mean for numeric variables in subset_data and simulated_data
mean_subset_data <- subset_data %>%
dplyr::select(where(is.numeric)) %>%
apply(X = ., MARGIN = 2, FUN = mean)
mean_simulated_data <- simulated_data %>%
dplyr::select(where(is.numeric)) %>%
apply(X = ., MARGIN = 2, FUN = mean)
# Compute correlation matrix for numeric variables in subset_data and simulated_data
cor_subset_data <- subset_data %>%
dplyr::select(where(is.numeric)) %>%
cor()
cor_simulated_data <- simulated_data %>%
dplyr::select(where(is.numeric)) %>%
cor()
# Calculate proportions for categorical variables in subset_data
proportions_subset_data <- subset_data %>%
dplyr::select(where(is.factor)) %>%
sapply(function(x) prop.table(table(x)))
# Calculate proportions for categorical variables in simulated_data
proportions_simulated_data <- simulated_data %>%
dplyr::select(where(is.factor)) %>%
sapply(function(x) prop.table(table(x)))
# Save means to CSV
write.csv(mean_subset_data, file = "data/subset_data_mean.csv")
write.csv(mean_simulated_data, file = "data/simulated_data_mean.csv")
# Save correlation matrices to CSV
write.csv(cor_subset_data, file = "data/subset_data_correlation.csv")
write.csv(cor_simulated_data, file = "data/simulated_data_correlation.csv")
# Save proportions to csv
write.csv(proportions_subset_data, file = "data/subset_data_prop.csv")
write.csv(proportions_simulated_data, file = "data/simulated_data_prop.csv")
# --- PLOT AND ANALYZE DATA ---
simulated_data <- read.csv(file = "data/bd_inflm_simulated.csv")
ggplot(simulated_data, aes(x = agem, y = lgvegf, color = dxgroup, linetype = factor(gender))) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE) +  # Add regression line without confidence interval
labs(x = "Age (months)", y = "lgvegf", color = "dxgroup", linetype = "Gender") +  # Labels
theme_minimal()
mod <- lm(lgvegf ~ dxgroup*agem*gender, data = simulated_data)
summary(mod)
ggplot(simulated_data, aes(x = agem, y = lgvegf, color = factor(dxgroup), linetype = factor(gender))) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE) +  # Add regression line without confidence interval
labs(x = "Age (months)", y = "lgvegf", color = "dxgroup", linetype = "Gender") +  # Labels
theme_minimal()
proportions_subset_data
proportions_simulated_data
simulated_binary_gender
proportions_subset_data
### --- LOAD PACKAGES ---
# compare list to the output from new packages and install the missing packages
list.of.packages <- c("readr", "MASS", "plyr", "tidyverse", "lme4", "car","ggplot2", "nlme" )
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# print(length(new.packages)) # if this is != 0, then it will install the new package(s)
if(length(new.packages)) install.packages(new.packages)
library(readr)   # For reading CSV files
library(plyr)    # For data manipulation
library(tidyverse)  # For data wrangling and visualization
library(lme4)    # For linear mixed-effects models
library(car)     # For diagnostic plots
library(ggplot2) # For visualization
library(nlme)    # For fitting mixed-effects models
library(MASS)  # For simulating data with based on sample correlations
### --- PART I ---
### Note: Study goals
# data was generated from a longitudinal study on bipolar disorder
# we are interested in the relationship between inflammation markers and symptom severity in BD
# the goal is to systematically establish their illness progresses and what influences the prognosis
# Due to data sharing and privacy protocols, we cannot share the csv file, but I have provided simulated data from the first visit below,
# and I have shown how that data was simulated from the original dataset in PART II
### --- LOAD DATA ---
# Read the CSV file
data <- read_csv("data/infl_231010.csv")
# Use complete.cases() function to retain rows with complete data
complete_data <- data[complete.cases(data[, c("bdnf", "ccl11", "ccl26", "ip10",
"mcp1", "mdc", "mip1b", "il17a", "vegf", "fract",
"ifny", "il10", "il6", "il8", "tnfa", "crp",
"saa", "icam1", "vcam1", "lgcrp", "lgccl11",
"lgccl26", "lgip10", "lgmcp1", "lgmdc", "lgmip1b",
"lgil17a", "lgvegf", "lgifny", "lgil10", "lgil6",
"lgil8", "lgtnfa", "lgsaa", "lgicam1", "lgvcam1",
"lgbdnf", "lgfract", 'agem' ,'dxgroup', 'gender', 'visit', 'subnum', 'time')]), ]
complete_data <- complete_data %>% mutate(across(c(subnum, visit, gender, dxgroup, gender, race, race_lat, hisp, veteran,), as.factor))
### --- FIT DATA TO MODEL ---
# Fit the mixed-effects model using lme4
# effects of time on log vgef is affected by agem, dxgroup and gender
# depending on whether individual is male/female, the effect of having BD may vary on vgef
# i.e. effect of BD on vgef depends on gender
mod1 <- lme(lgvegf ~ time * (agem * dxgroup + gender) + dxgroup * (gender) ,
random = ~ time | subnum,   data = complete_data)
# Print model summary
summary(mod1)
# Extract fitted/predicted values
complete_data$fitted_values <- fitted(mod1)
### --- PLOT DATA ---
# Create a ggplot to plot the raw data showing BD vs. HC group
jpeg('figures/plot1.jpg')
ggplot(complete_data, aes(x = time, y = lgvegf, color = dxgroup)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = FALSE) +  # Add regression line without confidence interval
labs(x = "Time", y = "lgvegf", color = "dxgroup") +  # Labels
theme_minimal()
dev.off()
# Create a ggplot to plot the raw data showing BD vs. HC and Female vs Male
jpeg('figures/plot2.jpeg')
ggplot(complete_data, aes(x = time, y = lgvegf, color = dxgroup, linetype = gender)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE, alpha = 0.3) +  # Add regression line with confidence interval
labs(x = "Time", y = "lgvegf", color = "dxgroup", linetype = "Gender") +  # Labels
scale_linetype_manual(values = c("solid", "dashed")) +  # Specify line styles
theme_minimal()
dev.off()
# Create a ggplot to plot the predicted values showing BD vs. HC and Female vs Male
jpeg('figures/predicted.jpeg')
ggplot(complete_data, aes(x = time, y = fitted_values, color = dxgroup, linetype = gender)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE) +  # Add regression line without confidence interval
labs(x = "Time", y = "Predicted lgvegf", color = "dxgroup") +  # Labels
theme_minimal()
dev.off()
### --- LOAD PACKAGES ---
# compare list to the output from new packages and install the missing packages
list.of.packages <- c("readr", "MASS", "plyr", "tidyverse", "lme4", "car","ggplot2", "nlme" )
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# print(length(new.packages)) # if this is != 0, then it will install the new package(s)
if(length(new.packages)) install.packages(new.packages)
library(readr)   # For reading CSV files
library(plyr)    # For data manipulation
library(tidyverse)  # For data wrangling and visualization
library(lme4)    # For linear mixed-effects models
library(car)     # For diagnostic plots
library(ggplot2) # For visualization
library(nlme)    # For fitting mixed-effects models
library(MASS)  # For simulating data with based on sample correlations
### --- PART II ---
### Note: Data sharing and privacy
# Due to data privacy protocols, I have simulated a subset of the data (from the first visit) and a subset of variables as sample data for this tutorial
### --- LOAD DATA ---
# Read the CSV file
data <- read_csv("data/infl_231010.csv")
# Use complete.cases() function to retain rows with complete data
complete_data <- data[complete.cases(data[, c("bdnf", "ccl11", "ccl26", "ip10",
"mcp1", "mdc", "mip1b", "il17a", "vegf", "fract",
"ifny", "il10", "il6", "il8", "tnfa", "crp",
"saa", "icam1", "vcam1", "lgcrp", "lgccl11",
"lgccl26", "lgip10", "lgmcp1", "lgmdc", "lgmip1b",
"lgil17a", "lgvegf", "lgifny", "lgil10", "lgil6",
"lgil8", "lgtnfa", "lgsaa", "lgicam1", "lgvcam1",
"lgbdnf", "lgfract", 'agem' ,'dxgroup', 'gender', 'visit', 'subnum', 'time')]), ]
complete_data <- complete_data %>% mutate(across(c(subnum, visit, gender, dxgroup, gender, race, race_lat, hisp, veteran,), as.factor))
#
### --- SIMULATE NEW DATA ---
#Subset variables and data from visit 101 for simulation
subset_data <- complete_data %>%
dplyr::select(gender,visit, dxgroup ,  lgmip1b , lgil17a ,  agem  , dxgroup , lgvegf, lgbdnf) %>% filter(visit == 101)
# Get the mean and covariance matrix of the observed data for continuous variables
continuous_data <- subset_data %>% dplyr::select(-c(dxgroup, gender, visit ))
mean_continuous <- colMeans(continuous_data)
cov_continuous <- cov(continuous_data)
# Generate simulated data for continuous variables using multivariate normal distribution
n_obs_simulated <- 1000
simulated_continuous <- mvrnorm(n = n_obs_simulated, mu = mean_continuous, Sigma = cov_continuous)
# Convert simulated continuous data to a dataframe
simulated_continuous_df <- as.data.frame(simulated_continuous)
# Get the proportion of each category in dxgroup and gender variables from the observed dataset
prop_dxgroup <- prop.table(table(subset_data$dxgroup))
prop_gender <- prop.table(table(subset_data$gender))
# Generate simulated binary data for dxgroup and gender variables based on the proportions from the observed dataset
simulated_binary_dxgroup <- rbinom(n_obs_simulated, 1, prob = prop_dxgroup[2])
simulated_binary_gender <- rbinom(n_obs_simulated, 1, prob = prop_gender[2])
# Combine simulated binary data for dxgroup and gender variables
simulated_binary <- cbind(simulated_binary_dxgroup, simulated_binary_gender)
# Combine simulated continuous and binary data
simulated_data <- cbind(simulated_binary, simulated_continuous_df)
# Rename columns and ensure the binary variables are factorized
colnames(simulated_data)[1:2] <- c("dxgroup", "gender")
simulated_data <- simulated_data %>% mutate(across(c("dxgroup", "gender"), as.factor))
# write data to csv file
write.csv(simulated_data, "data/bd_inflm_simulated.csv", row.names=FALSE)
### --- SANITY CHECKS ---
# Compute mean for numeric variables in subset_data and simulated_data
mean_subset_data <- subset_data %>%
dplyr::select(where(is.numeric)) %>%
apply(X = ., MARGIN = 2, FUN = mean)
mean_simulated_data <- simulated_data %>%
dplyr::select(where(is.numeric)) %>%
apply(X = ., MARGIN = 2, FUN = mean)
# Compute correlation matrix for numeric variables in subset_data and simulated_data
cor_subset_data <- subset_data %>%
dplyr::select(where(is.numeric)) %>%
cor()
cor_simulated_data <- simulated_data %>%
dplyr::select(where(is.numeric)) %>%
cor()
# Calculate proportions for categorical variables in subset_data
proportions_subset_data <- subset_data %>%
dplyr::select(where(is.factor)) %>%
sapply(function(x) prop.table(table(x)))
# Calculate proportions for categorical variables in simulated_data
proportions_simulated_data <- simulated_data %>%
dplyr::select(where(is.factor)) %>%
sapply(function(x) prop.table(table(x)))
# Save means to CSV
write.csv(mean_subset_data, file = "data/subset_data_mean.csv")
write.csv(mean_simulated_data, file = "data/simulated_data_mean.csv")
# Save correlation matrices to CSV
write.csv(cor_subset_data, file = "data/subset_data_correlation.csv")
write.csv(cor_simulated_data, file = "data/simulated_data_correlation.csv")
# Save proportions to csv
write.csv(proportions_subset_data, file = "data/subset_data_prop.csv")
write.csv(proportions_simulated_data, file = "data/simulated_data_prop.csv")
# --- PLOT AND ANALYZE DATA ---
simulated_data <- read.csv(file = "data/bd_inflm_simulated.csv")
ggplot(simulated_data, aes(x = agem, y = lgvegf, color = factor(dxgroup), linetype = factor(gender))) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE) +  # Add regression line without confidence interval
labs(x = "Age (months)", y = "lgvegf", color = "dxgroup", linetype = "Gender") +  # Labels
theme_minimal()
mod <- lm(lgvegf ~ dxgroup*agem*gender, data = simulated_data)
summary(mod)
save(mod1, file = "mod1.RData")
save(mod1, file = "mod1.RData")
# Load the model object from the file
saved_mod1 <- load("mod1.RData")
# Use the loaded model object for prediction or further analysis
summary(saved_mod1)
save(mod1, file = "analysis/mod1.RData")
# Load the model object from the file
saved_mod1 <- load("analysis/mod1.RData")
# Use the loaded model object for prediction or further analysis
summary(saved_mod1)
# Extract fitted/predicted values
complete_data$fitted_values <- fitted(mod1)
# Use the loaded model object for prediction or further analysis
summary(saved_mod1)
save(mod1, file = "analysis/mod1.rda")
# Load the model object from the file
saved_mod1 <- load("analysis/mod1.rda")
# Use the loaded model object for prediction or further analysis
summary(saved_mod1)
saved_mod1
# Use the loaded model object for prediction or further analysis
summary(mod1)
# Load the model object from the file
load("analysis/mod1.rda")
# Use the loaded model object for prediction or further analysis
summary(mod1)
# access the loaded model object by refering to it by the original name of the obj
summary(mod1)
load("analysis/mod1.rda")
# access the loaded model object by refering to it by the original name of the obj
summary(mod1)
if(length(new.packages)) {
install.packages(new.packages)
}
if(length(new.packages) install.packages(new.packages)
### ----- SCENARIO (PART I)-----
# As a collaborator, you can replicate the exact same analyses that were done for this research project by loading the data file shared with you
# The analyses include fitting a mixed-effects model and creating visualizations.
# For users who were not given the data file, they can still access the analyses by loading the linear regression model objects
# They can also still access the figures created from the ggplot code below.
### --- LOAD PACKAGES ---
# Compare the list of required packages to installed packages.
# Install missing packages if necessary.
list.of.packages <- c("readr", "MASS", "plyr", "tidyverse", "lme4", "car", "ggplot2", "nlme")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages) > 0) {
install.packages(new.packages)
}
# Load required packages
library(readr)     # For reading CSV files
library(plyr)      # For data manipulation
library(tidyverse) # For data wrangling and visualization
library(lme4)      # For linear mixed-effects models
library(car)       # For diagnostic plots
library(ggplot2)   # For visualization
library(nlme)      # For fitting mixed-effects models
library(MASS)      # For simulating data based on sample correlations
### --- PART I ---
### Note: Study goals
# The simulated data is from a longitudinal study on bipolar disorder.
# The goal is to investigate the relationship between inflammation markers and symptom severity in BD.
# We aim to establish how the illness progresses and what influences the prognosis.
# Due to data sharing and privacy protocols, the CSV file cannot be shared.
### --- LOAD DATA ---
# Read the simulated data file
data <- read_csv("data/infl_231010.csv")
# Retain rows with complete data
complete_data <- data[complete.cases(data[, c("bdnf", "ccl11", "ccl26", "ip10",
"mcp1", "mdc", "mip1b", "il17a", "vegf", "fract",
"ifny", "il10", "il6", "il8", "tnfa", "crp",
"saa", "icam1", "vcam1", "lgcrp", "lgccl11",
"lgccl26", "lgip10", "lgmcp1", "lgmdc", "lgmip1b",
"lgil17a", "lgvegf", "lgifny", "lgil10", "lgil6",
"lgil8", "lgtnfa", "lgsaa", "lgicam1", "lgvcam1",
"lgbdnf", "lgfract", 'agem' ,'dxgroup', 'gender', 'visit', 'subnum', 'time')]), ]
# Convert selected columns to factors
complete_data <- complete_data %>%
mutate(across(c(subnum, visit, gender, dxgroup, gender, race, race_lat, hisp, veteran,), as.factor))
### --- FIT DATA TO MODEL ---
# Fit the mixed-effects model using lme4
mod1 <- lme(lgvegf ~ time * (agem * dxgroup + gender) + dxgroup * (gender),
random = ~ time | subnum, data = complete_data)
# Print model summary
summary(mod1)
# Save the model object
save(mod1, file = "analysis/mod1.rda")
# Load the model object from the file
load("analysis/mod1.rda")
# Print model summary
summary(mod1)
# Extract fitted/predicted values
complete_data$fitted_values <- fitted(mod1)
### --- PLOT DATA ---
# Plot the raw data showing BD vs. HC group
jpeg('figures/plot1.jpg')
ggplot(complete_data, aes(x = time, y = lgvegf, color = dxgroup)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = FALSE) +  # Add regression line without confidence interval
labs(x = "Time", y = "lgvegf", color = "dxgroup") +  # Labels
theme_minimal()
dev.off()
# Plot the raw data showing BD vs. HC and Female vs. Male
jpeg('figures/plot2.jpeg')
ggplot(complete_data, aes(x = time, y = lgvegf, color = dxgroup, linetype = gender)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE, alpha = 0.3) +  # Add regression line with confidence interval
labs(x = "Time", y = "lgvegf", color = "dxgroup", linetype = "Gender") +  # Labels
scale_linetype_manual(values = c("solid", "dashed")) +  # Specify line styles
theme_minimal()
dev.off()
# Plot the predicted values showing BD vs. HC and Female vs. Male
jpeg('figures/predicted.jpeg')
ggplot(complete_data, aes(x = time, y = fitted_values, color = dxgroup, linetype = gender)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE) +  # Add regression line without confidence interval
labs(x = "Time", y = "Predicted lgvegf", color = "dxgroup") +  # Labels
theme_minimal()
dev.off()
renv::init()
### ----- SCENARIO (PART I)-----
# As a collaborator, you can replicate the exact same analyses that were done for this research project by loading the data file shared with you
# The analyses include fitting a mixed-effects model and creating visualizations.
# For users who were not given the data file, they can still access the analyses by loading the linear regression model objects
# They can also still access the figures created from the ggplot code below.
### --- LOAD PACKAGES ---
# Compare the list of required packages to installed packages.
# Install missing packages if necessary.
list.of.packages <- c("readr", "MASS", "plyr", "tidyverse", "lme4", "car", "ggplot2", "nlme")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages) > 0) {
install.packages(new.packages)
}
# Load required packages
library(readr)     # For reading CSV files
library(plyr)      # For data manipulation
library(tidyverse) # For data wrangling and visualization
library(lme4)      # For linear mixed-effects models
library(car)       # For diagnostic plots
library(ggplot2)   # For visualization
library(nlme)      # For fitting mixed-effects models
library(MASS)      # For simulating data based on sample correlations
### Note: Study goals
# The simulated data is from a longitudinal study on bipolar disorder.
# The goal is to investigate the relationship between inflammation markers and symptom severity in BD.
# We aim to establish how the illness progresses and what influences the prognosis.
# Due to data sharing and privacy protocols, the CSV file cannot be shared.
### --- LOAD DATA ---
# Read the simulated data file
data <- read_csv("data/infl_231010.csv")
# Retain rows with complete data
complete_data <- data[complete.cases(data[, c("bdnf", "ccl11", "ccl26", "ip10",
"mcp1", "mdc", "mip1b", "il17a", "vegf", "fract",
"ifny", "il10", "il6", "il8", "tnfa", "crp",
"saa", "icam1", "vcam1", "lgcrp", "lgccl11",
"lgccl26", "lgip10", "lgmcp1", "lgmdc", "lgmip1b",
"lgil17a", "lgvegf", "lgifny", "lgil10", "lgil6",
"lgil8", "lgtnfa", "lgsaa", "lgicam1", "lgvcam1",
"lgbdnf", "lgfract", 'agem' ,'dxgroup', 'gender', 'visit', 'subnum', 'time')]), ]
# Convert selected columns to factors
complete_data <- complete_data %>%
mutate(across(c(subnum, visit, gender, dxgroup, gender, race, race_lat, hisp, veteran,), as.factor))
### --- FIT DATA TO MODEL ---
# Fit the mixed-effects model using lme4
mod1 <- lme(lgvegf ~ time * (agem * dxgroup + gender) + dxgroup * (gender),
random = ~ time | subnum, data = complete_data)
# Print model summary
summary(mod1)
# Save the model object
save(mod1, file = "analysis/mod1.rda")
# Load the model object from the file
load("analysis/mod1.rda")
# Print model summary
summary(mod1)
# Extract fitted/predicted values
complete_data$fitted_values <- fitted(mod1)
### --- PLOT DATA ---
# Plot the raw data showing BD vs. HC group
jpeg('figures/plot1.jpg')
ggplot(complete_data, aes(x = time, y = lgvegf, color = dxgroup)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = FALSE) +  # Add regression line without confidence interval
labs(x = "Time", y = "lgvegf", color = "dxgroup") +  # Labels
theme_minimal()
dev.off()
# Plot the raw data showing BD vs. HC and Female vs. Male
jpeg('figures/plot2.jpeg')
ggplot(complete_data, aes(x = time, y = lgvegf, color = dxgroup, linetype = gender)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE, alpha = 0.3) +  # Add regression line with confidence interval
labs(x = "Time", y = "lgvegf", color = "dxgroup", linetype = "Gender") +  # Labels
scale_linetype_manual(values = c("solid", "dashed")) +  # Specify line styles
theme_minimal()
dev.off()
# Plot the predicted values showing BD vs. HC and Female vs. Male
jpeg('figures/predicted.jpeg')
ggplot(complete_data, aes(x = time, y = fitted_values, color = dxgroup, linetype = gender)) +
geom_point(size = 0.9) +  # Add points for the observed data
geom_smooth(method = "lm", se = TRUE) +  # Add regression line without confidence interval
labs(x = "Time", y = "Predicted lgvegf", color = "dxgroup") +  # Labels
theme_minimal()
dev.off()
renv::activate()
library(readr)     # For reading CSV files
library(plyr)      # For data manipulation
library(tidyverse) # For data wrangling and visualization
library(lme4)      # For linear mixed-effects models
library(car)       # For diagnostic plots
library(ggplot2)   # For visualization
library(nlme)      # For fitting mixed-effects models
library(MASS)      # For simulating data based on sample correlations
simulated_continuous <- mvrnorm(n = n_obs_simulated, mu = mean_subset_data, Sigma = cov_continuous)
mean_continuous
### ----- SCENARIO (PART II)-----
# Here's a workflow simulating data based on observed data and performing basic data checks
# This simulated data was provided for non-collaborators who wish to replicate scripts typically written for psychological research, as in part1.R
# The statistical properties (mean and covariance matrix) of the original and simulated data are saved in csv files in the data folder
### --- LOAD PACKAGES ---
# compare list to the output from new packages and install the missing packages
list.of.packages <- c("readr", "MASS", "plyr", "tidyverse", "lme4", "car","ggplot2", "nlme" )
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(readr)   # For reading CSV files
library(plyr)    # For data manipulation
library(tidyverse)  # For data wrangling and visualization
library(lme4)    # For linear mixed-effects models
library(car)     # For diagnostic plots
library(ggplot2) # For visualization
library(nlme)    # For fitting mixed-effects models
library(MASS)  # For simulating data with based on sample correlations
### --- PART II ---
### Note: Data sharing and privacy
# Due to data privacy protocols, I have simulated a subset of the data (from the first visit) and a subset of variables as sample data for this tutorial
### --- LOAD DATA ---
# Read the CSV file
data <- read_csv("data/infl_231010.csv")
# Use complete.cases() function to retain rows with complete data
complete_data <- data[complete.cases(data[, c("bdnf", "ccl11", "ccl26", "ip10",
"mcp1", "mdc", "mip1b", "il17a", "vegf", "fract",
"ifny", "il10", "il6", "il8", "tnfa", "crp",
"saa", "icam1", "vcam1", "lgcrp", "lgccl11",
"lgccl26", "lgip10", "lgmcp1", "lgmdc", "lgmip1b",
"lgil17a", "lgvegf", "lgifny", "lgil10", "lgil6",
"lgil8", "lgtnfa", "lgsaa", "lgicam1", "lgvcam1",
"lgbdnf", "lgfract", 'agem' ,'dxgroup', 'gender', 'visit', 'subnum', 'time')]), ]
complete_data <- complete_data %>% mutate(across(c(subnum, visit, gender, dxgroup, gender, race, race_lat, hisp, veteran,), as.factor))
### --- SIMULATE NEW DATA ---
#Subset variables and data from visit 101 for simulation
subset_data <- complete_data %>%
dplyr::select(gender,visit, dxgroup ,  lgmip1b , lgil17a ,  agem  , dxgroup , lgvegf, lgbdnf) %>% filter(visit == 101)
# Get the mean and covariance matrix of the observed data for continuous variables
continuous_data <- subset_data %>% dplyr::select(-c(dxgroup, gender, visit ))
mean_continuous <- colMeans(continuous_data)
cov_continuous <- cov(continuous_data)
# Generate simulated data for continuous variables using multivariate normal distribution
n_obs_simulated <- 1000
simulated_continuous <- mvrnorm(n = n_obs_simulated, mu = mean_continuous, Sigma = cov_continuous)
# Convert simulated continuous data to a dataframe
simulated_continuous_df <- as.data.frame(simulated_continuous)
# Get the proportion of each category in dxgroup and gender variables from the observed dataset
prop_dxgroup <- prop.table(table(subset_data$dxgroup))
prop_gender <- prop.table(table(subset_data$gender))
mean_continuous
mean_subset_data
### --- SANITY CHECKS ---
# Compute mean for numeric variables in subset_data and simulated_data
mean_subset_data <- subset_data %>%
dplyr::select(where(is.numeric)) %>%
apply(X = ., MARGIN = 2, FUN = mean)
mean_subset_data
cov_continuous
cor_subset_data
# Compute correlation matrix for numeric variables in subset_data and simulated_data
cor_subset_data <- subset_data %>%
dplyr::select(where(is.numeric)) %>%
cor()
cor_subset_data
# Load the model object from the file
load("analysis/mod1.rda")
# Print model summary
summary(mod1)
